# -*- coding: utf-8 -*-
"""Occupancy Calendars.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-yslethS9AT032FCImpasbhvVPtFWnvt
"""

# Commented out IPython magic to ensure Python compatibility.
# # @title
# %%capture
# # Your package installation code here
# 
# !pip install pandas
#

"""Upload the most updated Occupancy file"""

# Commented out IPython magic to ensure Python compatibility.
# # @title
# %%capture
# 
# 
# from google.colab import files
# 
# # Prompt the user to upload a CSV file
# uploaded = files.upload()
# 
# # Get the uploaded file name
# file_name = list(uploaded.keys())[0]
# 
# # Print the uploaded file name
# print(f"Uploaded file: {file_name}")
#

# @title
import calendar
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from datetime import datetime, timedelta
import pandas as pd

# Define the file path to the uploaded CSV file (use the uploaded file name)
file_path = file_name

# Read the uploaded CSV file
occupancy_data = pd.read_csv(file_path)

# Function to get user input for start and end months
def get_user_input():
    start_month = int(input("Enter the start month (1-12): "))
    end_month = int(input("Enter the end month (1-12): "))
    return start_month, end_month

# Define a function to display calendars for occupancy data using matplotlib
def display_calendar(year, start_month, end_month, occupancy_data):
    num_apartments = len(occupancy_data['apartment_number'].unique())
    num_months = end_month - start_month + 1

    # Adjust the size of the subplots by modifying the figsize parameter
    figsize_x = 2 * num_months  # Adjust the width
    figsize_y = 2 * num_apartments  # Adjust the height
    fig, axs = plt.subplots(num_apartments, num_months, figsize=(figsize_x, figsize_y))

    unique_apartments = occupancy_data['apartment_number'].unique()

    for apartment_index, apartment in enumerate(unique_apartments):
        apartment_data = occupancy_data[occupancy_data['apartment_number'] == apartment]
        month_index = 0
        for month in range(start_month, end_month + 1):
            cal = calendar.monthcalendar(year, month)
            ax = axs[apartment_index, month_index]

            for row_num, week in enumerate(cal):
                for day_num, day in enumerate(week):
                    if day != 0:
                        date = datetime(year, month, day)
                        is_occupied = any(
                            (datetime.strptime(row['start_date'], "%m/%d/%Y") <= date <= datetime.strptime(row['end_date'], "%m/%d/%Y"))
                            for _, row in apartment_data.iterrows()
                        )
                        color = 'red' if is_occupied else 'green'
                        ax.add_patch(Rectangle((day_num, 5 - row_num), 1, 1, color=color, alpha=0.5))
                        ax.text(day_num + 0.5, 5 - row_num + 0.5, str(day), va='center', ha='center', color='white')

            ax.set_xlim(0, 7)
            ax.set_ylim(0, 6)
            ax.set_xticks([])
            ax.set_yticks([])
            ax.set_aspect('equal')

            # Adjust the fontsize of the title (month label) to make it smaller
            ax.set_title(calendar.month_name[month] + ' ' + str(year), fontsize=10)

            month_index += 1

        for i in range(month_index, num_months):
            # Hide empty subplots for months beyond the selected range
            fig.delaxes(axs[apartment_index, i])

        ax = axs[apartment_index, 0]

        # Adjust the fontsize of the ylabel to make it smaller
        ax.set_ylabel(apartment, rotation=0, fontsize=10, va='center', ha='right')

    plt.suptitle(f"Occupancy for the selected months", fontsize=16)
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()

# Get user input for start and end months
start_month, end_month = get_user_input()

# Display calendars for the occupancy data based on user input
display_calendar(2023, start_month, end_month, occupancy_data)